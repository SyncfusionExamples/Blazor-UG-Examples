@page "/template"

@using Syncfusion.Blazor.Ribbon;
@using Syncfusion.Blazor.SplitButtons;

<BackstageNav></BackstageNav>

<div style="width:75%">
    <SfRibbon>
        <RibbonBackstageMenuSettings @ref=backstageRef Text="File" Visible="true">
            <Template>
                <div id="temp-content" style="width: 550px; height: 350px; display: flex">
                    <div id="items-wrapper" style="width: 130px; height:100%; background: #779de8;">
                        <ul>
                            <li id="close" @onclick="CloseContent">
                                <span class="e-icons e-close"></span> Close
                            </li>
                            @foreach(var item in backstageMenus)
                            {
                                <li id="@item.Value.name" @onclick="() => ContentClickHandler(item.Key)">
                                    <span class="e-icons @item.Value.icon"></span>
                                    @item.Value.name
                                </li>
                            }
                        </ul>
                    </div>
                    @GetBackstageContent(selectedContent)
                </div>
            </Template>
        </RibbonBackstageMenuSettings>
        <RibbonTabs>
            <RibbonTab HeaderText="Home">
                <RibbonGroups>
                    <RibbonGroup HeaderText="Clipboard">
                        <RibbonCollections>
                            <RibbonCollection>
                                <RibbonItems>
                                    <RibbonItem Type=RibbonItemType.SplitButton>
                                        <RibbonSplitButtonSettings Content="Paste" IconCss="e-icons e-paste" Items="@formatItems"></RibbonSplitButtonSettings>
                                    </RibbonItem>
                                </RibbonItems>
                            </RibbonCollection>
                            <RibbonCollection>
                                <RibbonItems>
                                    <RibbonItem Type=RibbonItemType.Button>
                                        <RibbonButtonSettings Content="Cut" IconCss="e-icons e-cut" ></RibbonButtonSettings>
                                    </RibbonItem>
                                    <RibbonItem Type=RibbonItemType.Button>
                                        <RibbonButtonSettings Content="Copy" IconCss="e-icons e-copy"></RibbonButtonSettings>
                                    </RibbonItem>
                                    <RibbonItem Type=RibbonItemType.Button>
                                        <RibbonButtonSettings Content="Format Painter" IconCss="e-icons e-format-painter"></RibbonButtonSettings>
                                    </RibbonItem>
                                </RibbonItems>
                            </RibbonCollection>
                        </RibbonCollections>
                    </RibbonGroup>
                </RibbonGroups>
            </RibbonTab>
        </RibbonTabs>
    </SfRibbon>
</div>

@code{

    RibbonBackstageMenuSettings backstageRef;

    Dictionary<int, (string name, string icon)> backstageMenus = new Dictionary<int, (string, string)>()
        {
        { 1, ("New", "e-file-new") },
        { 2, ("Open", "e-folder-open") },
        { 3, ("Save", "e-save") }
    };

    private string selectedContent = "new";

    private void CloseContent()
    {
        selectedContent = "new";
        backstageRef.HideBackstageAsync();
    }

    private void ContentClickHandler(int id)
    {
        if (backstageMenus.TryGetValue(id, out var menuItem))
        {
            selectedContent = menuItem.name;
        }
    }

    List<DropDownMenuItem> formatItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Keep Source Format" },
        new DropDownMenuItem{ Text = "Merge Format" },
        new DropDownMenuItem{ Text = "Keep Text Only" }
    };

        RenderFragment GetBackstageContent(string item) => item switch
    {
        "New" => @<div class="new-wrapper" style="padding: 20px;">
        <div class="section-title">New</div>
        <div class="category_container">
            <div class="doc_category_image"></div>
            <span class="doc_category_text">New document</span>
        </div>
    </div>,
        "Open" => @<div class="block-wrapper">
        <div class="section-title">Recent</div>
        @{
    var recentDocuments = new List<(string icon, string name, string description)>
    {
    ("e-notes", "Classic_layout.docx", "EJ2 >> Components >> Navigations >> Ribbon >> layouts"),
    ("e-notes", "Simplified_layout.docx", "EJ2 >> Components >> Navigations >> Ribbon >> layouts"),
    };
        }
        @foreach (var doc in recentDocuments)
    {
        @RenderWrapperContent(doc.icon, doc.name, doc.description)
    }
    </div>,
        "Save" => @<div class="block-wrapper">
        <div class="section-title">Save</div>
        @{
    var saveItems = new List<(string icon, string name, string description)>
    {
    ("e-save", "Save as", "Save a copy online"),
    };
        }
        @foreach (var item in saveItems)
    {
        @RenderWrapperContent(item.icon, item.name, item.description)
    }
    </div>
    };
}

<style>
    .e-ribbon-backstage-content {
        width: 550px;
        height: 350px;
    }

    .section-title {
        font-size: 22px;
    }

    .new-docs {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
    }

    .category_container {
        width: 150px;
        padding: 15px;
        text-align: center;
        cursor: pointer;
    }

    .doc_category_image {
        width: 80px;
        height: 100px;
        background-color: #fff;
        border: 1px solid rgb(125, 124, 124);
        text-align: center;
        overflow: hidden;
        margin: 0px auto 10px;
    }

    .doc_category_text {
        font-size: 16px;
    }

    .section-content {
        padding: 12px 0px;
        cursor: pointer;
    }

    .doc_icon {
        font-size: 16px;
        padding: 0px 10px;
    }

    .category_container:hover, .section-content:hover {
        background-color: #dfdfdf;
        border-radius: 5px;
        transition: all 0.3s;
    }

    #targetElement {
        width: 500px;
        height: 500px;
    }

    #items-wrapper ul {
        padding: 0;
        margin: 0;
    }

    #items-wrapper li {
        height: 38px;
        font-size: 16px;
        list-style: none;
        cursor: pointer;
        text-align: center;
        padding-top: 10px;
    }

    #items-wrapper li span {
        margin-right: 15px;
        font-size: 14px;
    }

    #items-wrapper ul li:hover {
        background-color: #a5bff4;
    }

    #content-wrapper .content-close {
        display: none;
    }

    #content-wrapper .content-open {
        display: block;
    }

</style>