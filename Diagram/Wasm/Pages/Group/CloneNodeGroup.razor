@page "/CloneNodeGroup"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@inject IJSRuntime js
@using Syncfusion.Blazor.Buttons


<SfButton Content="CloneGroup" OnClick="@CloneGroup" />
<SfDiagramComponent @ref="diagram" Width="50%" Height="500px" @bind-Nodes="NodeCollection"></SfDiagramComponent>

@functions
{

    SfDiagramComponent diagram;
    public DiagramObjectCollection<Node> NodeCollection = new DiagramObjectCollection<Node>();
    protected override void OnInitialized()
    {
        Node node1 = new Node()
            {
                OffsetX = 100,
                OffsetY = 150,
                Height = 100,
                Width = 100,
                ID = "node1",

            };
        NodeCollection.Add(node1);
        Node node2 = new Node()
            {
                OffsetX = 400,
                OffsetY = 200,
                Height = 100,
                Width = 100,
                ID = "node2",
               
            };
        NodeCollection.Add(node2);
        NodeGroup group1 = new NodeGroup()
            {
                ID = "group1",
                Children = new string[] { "node1", "node2" },
                OffsetX = 300,
                OffsetY = 300,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                        {
                            new ShapeAnnotation()
                            {
                            Content = "Group1"
                            }
                        },
            };
        NodeCollection.Add(group1);
    }
    public async Task CloneGroup()
    {
        Node node2 = NodeCollection[0].Clone() as Node;
        node2.ID = RandomId();
        Node node3 = NodeCollection[1].Clone() as Node;
        node3.ID = RandomId();
        Node node4 = NodeCollection[2].Clone() as Node;
        node4.ID = RandomId();
        string[] array = { node2.ID, node3.ID };
        (node4 as NodeGroup).Children = array;
        node4.OffsetX += 25;
        node4.OffsetY += 25;
        await diagram.AddDiagramElementsAsync(new DiagramObjectCollection<NodeBase>() { node2, node3, node4 });
    }

    internal string RandomId()
    {
        Random random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
#pragma warning disable CA5394 // Do not use insecure randomness
        return new string(Enumerable.Repeat(chars, 5)
          .Select(s => s[random.Next(s.Length)]).ToArray());
#pragma warning restore CA5394 // Do not use insecure randomness
    }

}