@page "/UserHandleClickEvents"

@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Diagram

<div>
    <SfDiagramComponent @ref="Diagram" Height="500px" Nodes="@nodes" Connectors="@connectors" SelectionSettings="@SelectedModel"
                        GetCustomTool="GetCustomTool">
        <SnapSettings Constraints="SnapConstraints.None"></SnapSettings>
    </SfDiagramComponent>
</div>

@code
{
    private SfDiagramComponent Diagram;
    private DiagramObjectCollection<Node> nodes { get; set; }
    private DiagramObjectCollection<Connector> connectors { get; set; }
    // Defines diagram's SelectionSettings.
    private DiagramSelectionSettings SelectedModel = new DiagramSelectionSettings();
    private DiagramObjectCollection<UserHandle> UserHandles = new DiagramObjectCollection<UserHandle>();

    protected override void OnInitialized()
    {
        nodes = new DiagramObjectCollection<Node>();
        connectors = new DiagramObjectCollection<Connector>();
        InitDiagramModel();
    }

    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        return id == "clone" ? new CloneTool(Diagram) : new DeleteTool(Diagram);
    }

    public class DeleteTool : InteractionControllerBase
    {
        private SfDiagramComponent diagram;
        public DeleteTool(SfDiagramComponent diagram) : base(diagram) { this.diagram = diagram; }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            diagram.Delete();
            base.OnMouseUp(args);
        }
    }

    public class CloneTool : DragController
    {
        private SfDiagramComponent diagram;
        public CloneTool(SfDiagramComponent diagram) : base(diagram) { this.diagram = diagram; }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            diagram.Copy();
            diagram.Paste();
            base.OnMouseDown(args);
        }
    }

    private void InitDiagramModel()
    {
        Node node = new Node()
        {
            ID = "Node1",
            OffsetX = 300,
            OffsetY = 200,
            Width = 100,
            Height = 100,
            Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "none" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation() { Content = "Node" }
            }
        };
        nodes.Add(node);

        Connector connector = new Connector()
        {
            ID = "Connector1",
            SourcePoint = new DiagramPoint() { X = 500, Y = 150 },
            TargetPoint = new DiagramPoint() { X = 600, Y = 250 },
            Type = ConnectorSegmentType.Orthogonal,
            Annotations = new DiagramObjectCollection<PathAnnotation>()
            {
                new PathAnnotation(){ Content = "Connector" }
            }
        };
        connectors.Add(connector);

        UserHandle cloneHandle = new UserHandle()
        {
            Name = "clone",
            PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
            Offset = 0,
            Side = Direction.Right,
            Visible = true,
            VisibleTarget = VisibleTarget.Node | VisibleTarget.Connector
        };

        UserHandle deleteHandle = new UserHandle()
        {
            Name = "delete",
            PathData = "M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z",
            Offset = 1,
            Side = Direction.Bottom,
            VisibleTarget = VisibleTarget.Node | VisibleTarget.Connector,
            Visible = true
        };

        UserHandles = new DiagramObjectCollection<UserHandle>()
        {
            cloneHandle, deleteHandle
        };

        SelectedModel = new DiagramSelectionSettings()
        {
            //Enable userhandle for selected model.
            Constraints = SelectorConstraints.UserHandle,
            UserHandles = this.UserHandles
        };
    }
}