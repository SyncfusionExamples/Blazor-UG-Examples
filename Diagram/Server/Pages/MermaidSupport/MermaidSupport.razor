@page "/MermaidSupport"

@using Syncfusion.Blazor.Diagram

<style>
    #diagram-space {
        width: 80%;
        float: left;
    }

    #properties {
        width: 20%;
        float: right;
    }
</style>

<div id="properties">
    <input type="button" value="SaveInMermaid" @onclick="@SaveAsMermaid" />
    <input type="button" value="Load Mermaid Data" @onclick="@LoadMermaid" />
</div>

<div id="diagram-space">
    <SfDiagramComponent @ref="diagram" Width="100%" Height="800px" @bind-Nodes="@nodes" NodeCreating="NodeCreating" @bind-Connectors="@connectors" ConnectorCreating="ConnectorCreating">
        <Layout Type="LayoutType.MindMap" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-Orientation="@oreintation" @bind-VerticalSpacing="@VerticalSpacing" @bind-HorizontalAlignment="@horizontalAlignment" @bind-VerticalAlignment="@verticalAlignment">
         </Layout>
        <SnapSettings></SnapSettings>
    </SfDiagramComponent>
</div>

@code
{
    private SfDiagramComponent diagram;
    private LayoutOrientation oreintation = LayoutOrientation.TopToBottom;
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Auto;
    private VerticalAlignment verticalAlignment = VerticalAlignment.Auto;
    private int HorizontalSpacing = 30;
    private int VerticalSpacing = 30;
    private string data = string.Empty;
    private bool IsLoading = false;
    private DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    private DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    private void SaveAsMermaid()
    {
        data = diagram.SaveDiagramAsMermaid();
    }

    private async void LoadMermaid()
    {
        await diagram.LoadDiagramFromMermaidAsync(data);
    }
    
    private BranchType GetBranch(IDiagramObject obj)
    {
        if((obj as Node).ID == "node3")
        {
            return BranchType.Root;
        }
        return BranchType.Right;
    }
    
    protected override void OnInitialized()
    {
        Node node1 = new Node()
        {
            ID = "node1",
            Width = 70,
            Height = 70,
            Ports = new DiagramObjectCollection<PointPort>()
            {
                new PointPort()
                {
                    ID="left",
                    Offset = new DiagramPoint() { X = 1, Y = 0.5},
                },new PointPort()
                {
                    ID="right",
                    Offset = new DiagramPoint() { X = 0, Y = 0.5},
                }
            },
        };
        nodes.Add(node1);
        Node node2 = new Node()
        {
            ID = "node2",
            Width = 70,
            Ports = new DiagramObjectCollection<PointPort>()
            {
                new PointPort()
                {
                    ID="left",
                    Offset = new DiagramPoint() { X = 0, Y = 0.5},
                }
            },
            Height = 70
        };
        nodes.Add(node2);
        Node node3 = new Node()
        {
            ID = "node3",
            Width = 70,
            Ports = new DiagramObjectCollection<PointPort>()
            {
                new PointPort()
                {
                    ID="right",
                    Offset = new DiagramPoint() { X = 1, Y = 0.5},
                }
            },
            Height = 70
        };
        nodes.Add(node3);
        Node node4 = new Node()
        {
            ID = "node4",
            Width = 70,
            Height = 70
        };
        nodes.Add(node4);
        Node node5 = new Node()
        {
            ID = "node5",
            Width = 70,
            Height = 70
        };
        nodes.Add(node5);
        Node node6 = new Node()
        {
            ID = "node6",
            Width = 70,
            Height = 70
        };
        nodes.Add(node6);
        Node node7 = new Node()
        {
            ID = "node7",
            Width = 70,
            Height = 70
        };
        nodes.Add(node7);
        Node node8 = new Node()
        {
            ID = "node8",
            Width = 70,
            Height = 70
        };
        nodes.Add(node8);
        Node node9 = new Node()
        {
            ID = "node9",
            Width = 70,
            Height = 70
        };
        nodes.Add(node9);
        Node node10 = new Node()
        {
            ID = "node10",
            Width = 70,
            Height = 70
        };
        nodes.Add(node10);
        Node node11 = new Node()
        {
            ID = "node11",
            Width = 70,
            Height = 70,
        };
        nodes.Add(node11);
        Node node12 = new Node()
        {
            ID = "node12",
            Width = 70,
            Height = 70
        };
        nodes.Add(node12);
        Node node13 = new Node()
        {
            ID = "node13",
            Width = 70,
            Height = 70
        };
        nodes.Add(node13);
        Node node14 = new Node()
        {
            ID = "node14",
            Width = 70,
            Height = 70
        };
        Node node15 = new Node()
        {
            ID = "node15",
            Width = 70,
            Height = 70
        };
        Node node16 = new Node()
        {
            ID = "node16",
            Width = 70,
            Height = 70
        };
        nodes.Add(node14);
        Node node17 = new Node()
        {
            ID = "node17",
            Ports = new DiagramObjectCollection<PointPort>()
            {
                new PointPort()
                {
                    ID="right",
                    Offset = new DiagramPoint() { X = 1, Y = 0.5},
                }
            },
            Width = 70,
            Height = 70,
        };
        nodes.Add(node15);
        nodes.Add(node16);
        nodes.Add(node17);

        Connector connector1 = new Connector() { ID = "connector1", SourceID = "node1", SourcePortID = "left", TargetID = "node2", TargetPortID = "left", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector1);

        Connector connector2 = new Connector() { ID = "connector2", SourceID = "node1", SourcePortID = "right", TargetID = "node3", TargetPortID = "right", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector2);

        Connector connector3 = new Connector() { ID = "connector3", SourceID = "node2", TargetID = "node4", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector3);
        Connector connector4 = new Connector() { ID = "connector4", SourceID = "node2", TargetID = "node5", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector4);
        Connector connector5 = new Connector() { ID = "connector5", SourceID = "node3", TargetID = "node6", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector5);
        Connector connector6 = new Connector() { ID = "connector6", SourceID = "node3", TargetID = "node7", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector6);
        Connector connector7 = new Connector() { ID = "connector7", SourceID = "node4", TargetID = "node8", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector7);
        Connector connector8 = new Connector() { ID = "connector8", SourceID = "node4", TargetID = "node9", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector8);
        Connector connector9 = new Connector() { ID = "connector9", SourceID = "node5", TargetID = "node10", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector9);
        Connector connector10 = new Connector() { ID = "connector10", SourceID = "node5", TargetID = "node11", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector10);
        Connector connector11 = new Connector() { ID = "connector11", SourceID = "node6", TargetID = "node12", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector11);
        Connector connector12 = new Connector() { ID = "connector12", SourceID = "node6", TargetID = "node13", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector12);
        Connector connector13 = new Connector() { ID = "connector13", SourceID = "node7", TargetID = "node14", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector13);
        Connector connector14 = new Connector() { ID = "connector14", SourceID = "node7", TargetID = "node15", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector14);
        Connector connector15 = new Connector() { ID = "connector15", SourceID = "node8", TargetID = "node16", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector15);
        Connector connector16 = new Connector() { ID = "connector16", SourceID = "node8", TargetID = "node17", Type = ConnectorSegmentType.Straight };
        connectors.Add(connector16);

    }

    private void NodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;

        node.Height = 100; node.Width = 100;
        node.Style.Fill = "#BB9AB1";
        
        if (!IsLoading)
        {
            node.Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse };
            node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                    Content = node.ID
                }
            };
        }
    }

    private void ConnectorCreating(IDiagramObject connector)
    {
        (connector as Connector).Type = ConnectorSegmentType.Bezier;
        (connector as Connector).SourceDecorator.Shape = DecoratorShape.None;
        (connector as Connector).TargetDecorator.Shape = DecoratorShape.None;
    }
}

