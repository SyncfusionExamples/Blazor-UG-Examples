@page "/Kanban/DragAndDrop/ExternalDragAndDrop/KanbantoKanban"

<PageTitle>Kanban to Kanban</PageTitle>

@using Syncfusion.Blazor.Kanban

<div class="component-container">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6">
                <SfKanban ID="TaskKanban" @ref="KanbanTaskRef" TValue="TasksModel" KeyField="Status" DataSource="Tasks" ExternalDropId="@TaskDropTarget">
                    <KanbanColumns>
                        <KanbanColumn HeaderText="Backlog" KeyField="@(new List<string>() {"Open"})"></KanbanColumn>
                        <KanbanColumn HeaderText="In Progress" KeyField="@(new List<string>() {"InProgress"})"></KanbanColumn>
                        <KanbanColumn HeaderText="Done" KeyField="@(new List<string>() {"Close"})"></KanbanColumn>
                    </KanbanColumns>
                    <KanbanCardSettings HeaderField="Id" ContentField="Summary"></KanbanCardSettings>
                    <KanbanEvents TValue="TasksModel" DragStop="TaskDragStop"></KanbanEvents>
                    <KanbanSortSettings SortBy="SortOrderBy.Index" Field="RankId"></KanbanSortSettings>
                </SfKanban>
            </div>
            <div class="col-md-6">
                <SfKanban ID="PizzaKanban" @ref="KanbanPizzaRef" TValue="PizzaModel" KeyField="Category" DataSource="PizzaData" ExternalDropId="@PizzaDropTarget">
                    <KanbanColumns>
                        <KanbanColumn HeaderText="Menu" KeyField="@(new List<string>() {"Menu"})"></KanbanColumn>
                        <KanbanColumn HeaderText="Order" KeyField="@(new List<string>() {"Order"})"></KanbanColumn>
                        <KanbanColumn HeaderText="Delivered" KeyField="@(new List<string>() {"Delivered"})"></KanbanColumn>
                    </KanbanColumns>
                    <KanbanCardSettings HeaderField="OrderID" ContentField="Description"></KanbanCardSettings>
                    <KanbanEvents TValue="PizzaModel" DragStop="PizzaDragStop"></KanbanEvents>
                    <KanbanSortSettings SortBy="SortOrderBy.Index" Field="RankId"></KanbanSortSettings>
                </SfKanban>
            </div>
        </div>
    </div>
</div>

@code {
    private SfKanban<TasksModel> KanbanTaskRef;
    private SfKanban<PizzaModel> KanbanPizzaRef;
    public class TasksModel
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public string Status { get; set; }
        public string Summary { get; set; }
        public string Assignee { get; set; }
        public int RankId { get; set; }
    }
    public class PizzaModel
    {
        public string OrderID { get; set; }
        public string Title { get; set; }
        public string Type { get; set; }
        public string Size { get; set; }
        public string Category { get; set; }
        public string Description { get; set; }
        public int RankId { get; set; }
    }
    private List<string> TaskDropTarget = new List<string> { "#PizzaKanban" };
    private List<string> PizzaDropTarget = new List<string> { "#TaskKanban" };
    int Id = new Random().Next(251, 1000);
    public List<TasksModel> Tasks = new List<TasksModel>()
{
        new TasksModel { Id = "Task 1", Title = "BLAZ-29001", Status = "Open", Summary = "Analyze the new requirements gathered from the customer.", Assignee = "Nancy Davloio", RankId = 1 },
        new TasksModel { Id = "Task 2", Title = "BLAZ-29002", Status = "InProgress", Summary = "Improve application performance", Assignee = "Andrew Fuller", RankId = 1 },
        new TasksModel { Id = "Task 3", Title = "BLAZ-29003", Status = "Open", Summary = "Arrange a web meeting with the customer to get new requirements.", Assignee = "Janet Leverling", RankId = 2 },
        new TasksModel { Id = "Task 4", Title = "BLAZ-29004", Status = "InProgress", Summary = "Fix the issues reported in the IE browser.", Assignee = "Janet Leverling", RankId = 2 },
        new TasksModel { Id = "Task 5", Title = "BLAZ-29005", Status = "Review", Summary = "Fix the issues reported by the customer.", Assignee = "Steven walker", RankId = 1 },
        new TasksModel { Id = "Task 6", Title = "BLAZ-29006", Status = "Review", Summary = "Fix the issues reported in Safari browser.", Assignee = "Nancy Davloio", RankId = 2 },
        new TasksModel { Id = "Task 7", Title = "BLAZ-29007", Status = "Close", Summary = "Test the application in the IE browser.", Assignee = "Margaret hamilt", RankId = 1 },
        new TasksModel { Id = "Task 8", Title = "BLAZ-29008", Status = "Validate", Summary = "Validate the issues reported by the customer.", Assignee = "Steven walker", RankId = 1 },
        new TasksModel { Id = "Task 9", Title = "BLAZ-29009", Status = "Open", Summary = "Show the retrieved data from the server in grid control.", Assignee = "Margaret hamilt", RankId = 3 },
        new TasksModel { Id = "Task 10", Title = "BLAZ-29010", Status = "InProgress", Summary = "Fix cannot open users default database SQL error.", Assignee = "Janet Leverling", RankId = 3 }
    };

    public List<PizzaModel> PizzaData = new List<PizzaModel>
{
        new PizzaModel { OrderID= "Order ID - #16365", Title= "Mexican Green Wave", Type= "Vegetarian", Size="Small", Category="Order", Description= "Stromboli sandwich with chili sauce.", RankId = 1  },
        new PizzaModel { OrderID = "Order ID - #16366", Title = "Fresh Veggie", Type = "Vegetarian", Size = "Medium", Category = "Order", Description = "Veggie with Onions and Capsicum.", RankId = 2 },
        new PizzaModel { OrderID = "Order ID - #16367", Title = "Peppy Paneer", Type = "Vegetarian", Size = "Large", Category = "Ready to Serve", Description = "It is made using toppings of tomato, mozzarella cheese and fresh basil.", RankId = 1 },
        new PizzaModel { OrderID = "Order ID - #16368", Title = "Margherita", Type = "Vegetarian", Size = "Small", Category = "Menu", Description = "Lebanese Pizza topped with tomato sauce.", RankId = 1 },
        new PizzaModel { OrderID = "Order ID - #16369", Title = "Indian Tandoori Paneer", Type = "Vegetarian", Size = "Medium", Category = "Delivered", Description = "Tandoori Paneer with capsicum, red paprika and mint.", RankId = 1 },
        new PizzaModel { OrderID = "Order ID - #16370", Title = "Pepper Barbecue Chicken", Type = "Non-Vegetarian", Size = "Medium", Category = "Ready to Serve", Description = "Pepper Barbecue Chicken with cheese.", RankId = 1 },
        new PizzaModel { OrderID = "Order ID - #16371", Title = "Chicken Sausage", Type = "Non-Vegetarian", Size = "Large", Category = "Ready to Serve", Description = "Chicken Sausage with cheese.", RankId = 2 },
        new PizzaModel { OrderID = "Order ID - #16372", Title = "Chicken Golden Delight", Type = "Non-Vegetarian", Size = "Large", Category = "Order", Description = "Barbeque chicken with a topping of golden corn loaded with extra cheese.", RankId = 3 },
        new PizzaModel { OrderID = "Order ID - #16373", Title = "Pepper Barbecue and Onion", Type = "Non-Vegetarian", Size = "Medium", Category = "Menu", Description = "Pepper Barbecue chicken with Onion.", RankId = 2 },
        new PizzaModel { OrderID = "Order ID - #16374", Title = "Chicken Fiesta", Type = "Non-Vegetarian", Size = "Small", Category = "Delivered", Description = "Grilled Chicken Rashers with Peri-Peri chicken, Onion and Capsicum.", RankId = 2 },
    };

    private async void TaskDragStop(DragEventArgs<TasksModel> args)
    {
        if (args.IsExternal)
        {
            args.Cancel = true;
            await KanbanTaskRef.DeleteCardAsync(args.Data);
            KanbanTargetDetails<PizzaModel> KanbanPizzaTargetDetails = await KanbanPizzaRef.GetTargetDetailsAsync((int)args.Left, (int)args.Top);
            List<PizzaModel> pizzaData = new List<PizzaModel>();
            int TaskIndex;
            foreach (TasksModel taskData in args.Data)
            {
                if ((KanbanPizzaTargetDetails != null) && !String.IsNullOrEmpty(KanbanPizzaTargetDetails.PreviousCardId))
                {
                    TaskIndex = KanbanPizzaTargetDetails.PreviousCardData[0].RankId + 1;
                }
                else
                {
                    TaskIndex = 1;
                }
                pizzaData.Add(new PizzaModel { OrderID = "Order ID - #" + Id, Title = "Margherita", Type = "Vegetarian", Size = "Small", Category = taskData.Status, Description = taskData.Summary, RankId = TaskIndex });
                Id++;
            }
            await KanbanPizzaRef.AddCardAsync(pizzaData);
        }
    }

    private async void PizzaDragStop(DragEventArgs<PizzaModel> args)
    {
        if (args.IsExternal)
        {
            args.Cancel = true;
            await KanbanPizzaRef.DeleteCardAsync(args.Data);
            KanbanTargetDetails<TasksModel> KanbanTaskTargetDetails = await KanbanTaskRef.GetTargetDetailsAsync((int)args.Left, (int)args.Top);
            List<TasksModel> taskModelData = new List<TasksModel>();
            int PizzaIndex;
            foreach (PizzaModel pizzaModelData in args.Data)
            {
                if ((KanbanTaskTargetDetails != null) && !String.IsNullOrEmpty(KanbanTaskTargetDetails.PreviousCardId))
                {
                    PizzaIndex = KanbanTaskTargetDetails.PreviousCardData[0].RankId + 1;
                }
                else
                {
                    PizzaIndex = 1;
                }
                taskModelData.Add(new TasksModel { Id = "Task " + Id, Title = "BLAZ-29001", Status = pizzaModelData.Category, Summary = "Analyze the new requirements gathered from the customer.", Assignee = "Nancy Davloio", RankId = PizzaIndex });
                Id++;
            }
            await KanbanTaskRef.AddCardAsync(taskModelData);
        }
    }
}