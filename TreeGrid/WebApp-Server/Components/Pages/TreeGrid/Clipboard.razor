@page "/treegrid/clipboard"
@rendermode InteractiveServer
@using TreeGridUGSample.Components.Data
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids

<div>
    <SfButton OnClick="Copy">Copy</SfButton>
    <SfButton OnClick="CopyHeader">Copy With Header</SfButton>
</div>

<div style="width:200px;margin:20px;">
    <h5>Select Hierarchy mode</h5>
    <SfDropDownList TValue="string" TItem="DropdownData" @bind-Value="@CopyMode" DataSource="@CopyModes">
        <DropDownListEvents TValue="string" TItem="DropdownData" ValueChange="OnTypeChange"></DropDownListEvents>
        <DropDownListFieldSettings Text="Mode" Value="Id"></DropDownListFieldSettings>
    </SfDropDownList>
</div>

<SfTreeGrid @ref="TreeGrid" DataSource="@TreeData" CopyHierarchyMode="@CopyType" IdMapping="TaskId" ParentIdMapping="ParentId" TreeColumnIndex="1" AllowTextWrap="true">
    <TreeGridEvents TValue="BusinessObject" BeforeCopyPaste="BeforeCopyPasteHandler" BeforeCellPaste="BeforeCellPasteHandler"></TreeGridEvents>
    <TreeGridColumns>
        <TreeGridColumn Field="TaskId" HeaderText="Task ID" Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="100"></TreeGridColumn>
        <TreeGridColumn Field="StartDate" HeaderText="Start Date" Format="yMd" Type="Syncfusion.Blazor.Grids.ColumnType.Date" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="Duration" HeaderText="Duration" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="Progress" HeaderText="Progress" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="Priority" HeaderText="Priority" Width="100"></TreeGridColumn>
    </TreeGridColumns>
</SfTreeGrid>
<div class="col-lg-3 property-section">
    <table style="margin-top: 5px; border-collapse: separate; border-spacing: 5px 25px; width: 100%;">
        <tr>
            <td style="width: 100%;">
                <div style="font-weight:600; padding-right: 3px"><h4>Event Trace</h4></div>
            </td>
        </tr>
        <tr>
            <td style="width: 100%; padding-right: 1px; padding-left: 15px;">
                <div class="treegrid-eventarea" style="height: 70px; overflow-y: auto; font-size: 13px;font-family:'Times New Roman', Times, serif">
                    @foreach (var eventName in EventNames)
                    {
                        <p><span style="color: green; font-weight:bold">@eventName</span> event called</p>
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td class="evtbtn" style="width: 100%;">
                <button class="clear-button" @onclick="ClearEventNames">Clear</button>
            </td>
        </tr>
    </table>
</div>
@code
{
    SfTreeGrid<BusinessObject> TreeGrid;
    public List<BusinessObject> TreeData { get; set; }
    public string CopyMode { get; set; } = "Parent";
    private List<string> EventNames { get; set; } = new List<string>();
    public CopyHierarchyType CopyType { get; set; } = CopyHierarchyType.Parent;
    public List<DropdownData> CopyModes { get; set; } = new List<DropdownData>();
    private bool ClearingByButton { get; set; }
    private void ClearEventNames()
    {
        EventNames = new List<string>();
        ClearingByButton = true;
    }
    public class DropdownData
    {
        public string Id { get; set; }
        public string Mode { get; set; }
    }

    protected override void OnInitialized()
    {
        this.TreeData = BusinessObject.GetSelfDataSource().ToList();
        this.CopyModes.Add(new DropdownData() { Id = "Parent", Mode = "Parent" });
        this.CopyModes.Add(new DropdownData() { Id = "Child", Mode = "Child" });
        this.CopyModes.Add(new DropdownData() { Id = "Both", Mode = "Both" });
        this.CopyModes.Add(new DropdownData() { Id = "None", Mode = "None" });
    }

    private async void OnTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropdownData> Args)
    {
        if (Args.Value == "Parent")
        {
            CopyType = CopyHierarchyType.Parent;
        }
        else if (Args.Value == "Child")
        {
            CopyType = CopyHierarchyType.Child;
        }
        else if (Args.Value == "Both")
        {
            CopyType = CopyHierarchyType.Both;
        }
        else if (Args.Value == "None")
        {
            CopyType = CopyHierarchyType.None;
        }
    }
    public void BeforeCopyPasteHandler(Syncfusion.Blazor.TreeGrid.BeforeCopyPasteEventArgs args)
    {
        EventNames.Insert(0, "BeforeCopyPaste");
    }
    public void BeforeCellPasteHandler(Syncfusion.Blazor.TreeGrid.BeforeCellPasteEventArgs<BusinessObject> args)
    {
        EventNames.Insert(0, "BeforeCellPaste");
    }
    public async void Copy()
    {
        await this.TreeGrid.CopyAsync();
    }

    public async void CopyHeader()
    {
        await this.TreeGrid.CopyAsync(true);
    }
}