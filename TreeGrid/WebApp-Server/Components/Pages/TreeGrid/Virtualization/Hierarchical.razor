@page "/treegrid/virtualization/virtualhierarchydata"
@rendermode InteractiveServer
@using TreeGridUGSample.Components.Data
@using Syncfusion.Blazor.TreeGrid;
@using Syncfusion.Blazor.Grids;

<SfTreeGrid RowHeight="35" OverscanCount="5" @ref="TreeGrid" TValue="VirtualHierarchyData" DataSource="@TreeGridData" ChildMapping="Children" EnableVirtualization="true" Height="400" TreeColumnIndex="1" EnableVirtualMaskRow="true" Toolbar="@(new List<string>(){"Add","Edit","Delete","Update","Cancel","ExpandAll", "CollapseAll"})">
    <TreeGridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Cell" NewRowPosition="RowPosition.Child" />
    <TreeGridPageSettings PageSize="30"></TreeGridPageSettings>
    <TreeGridColumns>
        <TreeGridColumn Field="TaskID" IsPrimaryKey="true" HeaderText="Player Jersey" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="FIELD1" HeaderText="Player Name" Width="100"></TreeGridColumn>
        <TreeGridColumn Field="FIELD2" HeaderText="Year" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="FIELD3" HeaderText="Stint" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="FIELD4" HeaderText="TMID" Width="80"></TreeGridColumn>
    </TreeGridColumns>
</SfTreeGrid>

@code {
    // Reference to Tree Grid instance.
    private SfTreeGrid<VirtualHierarchyData> TreeGrid;
    public VirtualHierarchyData[] TreeGridData { get; set; }

    // On component initialization, flatten the hierarchical data and bind to Tree Grid.
    protected override void OnInitialized()
    {
        this.TreeGridData = HierarchyToFlatData(VirtualHierarchyData.GetVirtualHierarchyData(), "Children").ToArray();
    }

    // Recursive method to flatten hierarchical data into a linear list preserving display order.
    public List<VirtualHierarchyData> HierarchyToFlatData(List<VirtualHierarchyData> dataSource, string childMapping, List<VirtualHierarchyData> addedData = null)
    {
        // If no list is passed to collect flat data, create a new one.
        if (addedData == null)
        {
            addedData = new List<VirtualHierarchyData>();
        }

        foreach (var item in dataSource)
        {
            // Add the current item to the flat list.
            addedData.Add(item);

            // Get the property info for the child mapping (e.g., "Children").
            var propertyInfo = item.GetType().GetProperty(childMapping);

            // Get the children using the property name.
            var children = propertyInfo?.GetValue(item) as IEnumerable<VirtualHierarchyData>;
            if (children != null)
            {
                // Recursive call to process children.
                HierarchyToFlatData(children.ToList(), childMapping, addedData);
            }
        }

        // Return the final flat list.
        return addedData;
    }

    // Sample data model with recursive Children property.
   
}