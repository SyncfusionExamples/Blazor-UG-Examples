@page "/treegrid/events"
@rendermode InteractiveServer
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@using TreeGridUGSample.Components.Data
<div class="col-lg-9 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfTreeGrid DataSource="@TreeGridData" @ref="TreeGridInstance" AllowExcelExport=true AllowPdfExport=true AllowFiltering=true IdMapping="TaskID" ParentIdMapping="ParentID" AllowResizing=true TreeColumnIndex="1" Height="312" AllowPaging="true" AllowSelection="true" AllowSorting="true" AllowReordering="true" Toolbar="@( new List<string>() { "Add","Delete","Edit","Update","Cancel","Search","ExcelExport","PdfExport"})" AllowRowDragAndDrop=true>
                <TreeGridPageSettings PageSize="2"></TreeGridPageSettings>
                <TreeGridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Cell" />
                <TreeGridEvents TValue="SelfReferenceData" OnActionFailure="ActionFailureHandler" Created="CreatedHandler" OnToolbarClick="ToolbarClickHandler"
                OnCellEdit="CellEditHandler" OnBeginEdit="BeginEditHandler" OnCellSave="CellSaveHandler" CellSaved="CellSavedHandler" RowSelecting="RowSelectingHandler" RowSelected="RowSelectedHandler"
                OnLoad="LoadHandler" OnDataBound="DataBoundHandler" RowDeselecting="RowDeselectingHandler" RowDeselected="RowDeselectHandler" ColumnReordered="ColumnReorderedHandler"
                Sorting="SortingHandler" Sorted="SortedHandler" Expanding="ExpandingHandler" Expanded="ExpandedHandler" ColumnReordering="ColumnReorderingHandler"
                PageChanging="PageChangingHandler" PageChanged="PageChangedHandler" Collapsed="CollapsedHandler" Collapsing="CollapsingHandler"
                RowCreating="RowCreatingHandler" RowCreated="RowCreatedHandler" RowDeleting="RowDeletingHandler" RowDeleted="RowDeletedHandler"
                OnExcelExport="ExcelExportHandler" OnPdfExport="PdfExportHandler" RowDragStarting="RowDragStartingHandler" RowDropping="RowDroppingHandler" RowDropped="RowDroppedHandler"
                Searching="SearchingHandler" Searched="SearchedHandler" OnResizeStart="ResizeStartHandler" ResizeStopped="ResizeStoppedHandler"
                                Filtering="FilteringHandler" Filtered="FilteredHandler" FilterDialogOpening="FilterDialogOpeningHandler" FilterDialogOpened="FilterDialogOpenedHandler"></TreeGridEvents>
                                <TreeGridFilterSettings Type="Syncfusion.Blazor.TreeGrid.FilterType.Excel"></TreeGridFilterSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="100" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="200"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText=" Start Date" Format="d" Type=ColumnType.Date Width="140" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="EndDate" HeaderText="End Date" Format="d" Type=ColumnType.Date Width="120" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="130" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="140"></TreeGridColumn>
                </TreeGridColumns>
            </SfTreeGrid>
        </div>
    </div>
</div>
<div class="col-lg-3 property-section">
    <table style="margin-top: 5px; border-collapse: separate; border-spacing: 5px 25px; width: 100%;">
        <tr>
            <td style="width: 100%;">
                <div style="font-weight:600; padding-right: 3px"><h4>Event Trace</h4></div>
            </td>
        </tr>
        <tr>
            <td style="width: 100%; padding-right: 1px; padding-left: 15px;">
                <div class="treegrid-eventarea" style="height: 250px; overflow-y: auto; font-size: 13px;font-family:'Times New Roman', Times, serif">
                    @foreach (var eventName in EventNames)
                    {
                        <p><span style="color: green; font-weight:bold">@eventName</span> event called</p>
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td class="evtbtn" style="width: 100%;">
                <button class="clear-button" @onclick="ClearEventNames">Clear</button>
            </td>
        </tr>
    </table>
</div>
@code {
    private List<string> EventNames { get; set; } = new List<string>();
    private List<SelfReferenceData> TreeGridData { get; set; } = new List<SelfReferenceData>();
    private bool ClearingByButton { get; set; }
    protected override void OnInitialized()
    {
        TreeGridData = SelfReferenceData.GetTree().ToList();
    }
    SfTreeGrid<SelfReferenceData> TreeGridInstance { get; set; }
    private void ClearEventNames()
    {
        EventNames = new List<string>();
        ClearingByButton = true;
    }
    public void ActionFailureHandler(FailureEventArgs args)
    {
        EventNames.Insert(0, "OnActionFailure");
    }
    public void BeginEditHandler(BeginEditArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "OnBeginEdit");
    }
    public void CellEditHandler(CellEditArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "OnCellEdit");
    }
    public void CellSaveHandler(CellSaveArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "OnCellSave");
    }
    public void CellSavedHandler(CellSavedArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "CellSaved");
    }
    public void CreatedHandler(object args)
    {
        EventNames.Insert(0, "Created");
    }
    public void LoadHandler(object args)
    {
        EventNames.Insert(0, "OnLoad");
    }
    public void DataBoundHandler(BeforeDataBoundArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "OnDataBound");
    }
    public void RowSelectingHandler(RowSelectingEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "RowSelecting");
    }
    public void RowSelectedHandler(RowSelectEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "RowSelected");
    }
    public void RowDeselectingHandler(RowDeselectEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "RowDeselecting");
    }
    public void RowDeselectHandler(RowDeselectEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "RowDeselected");
    }
    public void SortingHandler(SortingEventArgs args)
    {
        EventNames.Insert(0, "Sorting");
    }
    public void SortedHandler(SortedEventArgs args)
    {
        EventNames.Insert(0, "Sorted");
    }
    public void ExpandingHandler(RowExpandingEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Expanding");
    }
    public void ExpandedHandler(RowExpandedEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Expanded");
    }
    public void ColumnReorderingHandler(ColumnReorderingEventArgs args)
    {
        EventNames.Insert(0, "ColumnReordering");
    }
    public void ColumnReorderedHandler(ColumnReorderedEventArgs args)
    {
        EventNames.Insert(0, "ColumnReordered");
    }
    public void PageChangingHandler(GridPageChangingEventArgs args)
    {
        EventNames.Insert(0, "PageChanging");
    }
    public void PageChangedHandler(GridPageChangedEventArgs args)
    {
        EventNames.Insert(0, "PageChanged");
    }
    public void CollapsingHandler(RowCollapsingEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Collapsing");
    }
    public void CollapsedHandler(RowCollapsedEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Collapsed");
    }
    public void RowCreatingHandler(RowCreatingEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Creating");
    }
    public void RowCreatedHandler(RowCreatedEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Created");
    }
    public void RowDeletingHandler(RowDeletingEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Deleting");
    }
    public void RowDeletedHandler(RowDeletedEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "Deleted");
    }
    public void ExcelExportHandler()
    {
        EventNames.Insert(0, "ExcelExport");
    }
    public void PdfExportHandler()
    {
        EventNames.Insert(0, "PdfExport");
    }
    public void RowDragStartingHandler(RowDragStartingEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "RowDragStarting");
    }
    public void RowDroppingHandler(RowDroppingEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "RowDropping");
    }
    public void RowDroppedHandler(RowDroppedEventArgs<SelfReferenceData> args)
    {
        EventNames.Insert(0, "RowDropped");
    }
    public async void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "PDF Export")
        {
            await TreeGridInstance.ExportToPdfAsync();
        }
        else if (args.Item.Text == "Excel Export")
        {
            await TreeGridInstance.ExportToExcelAsync();
        }
    }
    public void SearchingHandler(SearchingEventArgs args)
    {
        EventNames.Insert(0, "Searching");
    }
    public void SearchedHandler(SearchedEventArgs args)
    {
        EventNames.Insert(0, "Searched");
    }
    public void ResizeStartHandler(ResizeArgs args)
    {
        EventNames.Insert(0, "ResizeStating");
    }
    public void ResizeStoppedHandler(ResizeArgs args)
    {
        EventNames.Insert(0, "ResizeStopped");
    }
    public void FilterDialogOpenedHandler(FilterDialogOpenedEventArgs args)
    {
        EventNames.Insert(0, "FilterDialogOpened");
    }
    public void FilterDialogOpeningHandler(FilterDialogOpeningEventArgs args)
    {
        EventNames.Insert(0, "FilterDialogOpening");
    }
    public void FilteredHandler(FilteredEventArgs args)
    {
        EventNames.Insert(0, "Filtered");
    }
    public void FilteringHandler(FilteringEventArgs args)
    {
        EventNames.Insert(0, "Filtering");
    }
    
}